{"version":3,"sources":["../../src/sqlFragmentFactories/createJsonSqlFragment.js"],"names":["log","Logger","child","namespace","token","greatestParameterPosition","value","undefined","InvalidInputError","Array","isArray","JSON","stringify","error","sql","values"],"mappings":";;;;;;;AAEA;;AAGA;;AAKA;;AAGA;;;;AAEA,MAAMA,GAAG,GAAGC,gBAAOC,KAAP,CAAa;AACvBC,EAAAA,SAAS,EAAE;AADY,CAAb,CAAZ;;+BAIgBC,K,EAAyBC,yB,KAAuD;AAC9F,MAAIC,KAAJ;;AAEA,MAAIF,KAAK,CAACE,KAAN,KAAgBC,SAApB,EAA+B;AAC7B,UAAM,IAAIC,yBAAJ,CAAsB,qCAAtB,CAAN;AACD,GAFD,MAEO,IAAIJ,KAAK,CAACE,KAAN,KAAgB,IAApB,EAA0B;AAC/BA,IAAAA,KAAK,GAAGF,KAAK,CAACE,KAAd,CAD+B,CAGjC;AACA;AACC,GALM,MAKA,IAAI,CAAC,4BAAcF,KAAK,CAACE,KAApB,CAAD,IAA+B,CAACG,KAAK,CAACC,OAAN,CAAcN,KAAK,CAACE,KAApB,CAApC,EAAgE;AACrE,UAAM,IAAIE,yBAAJ,CAAsB,2DAAtB,CAAN;AACD,GAFM,MAEA;AACL,QAAI;AACFF,MAAAA,KAAK,GAAGK,IAAI,CAACC,SAAL,CAAeR,KAAK,CAACE,KAArB,CAAR;AACD,KAFD,CAEE,OAAOO,KAAP,EAAc;AACdb,MAAAA,GAAG,CAACa,KAAJ,CAAU;AACRA,QAAAA,KAAK,EAAE,oCAAeA,KAAf;AADC,OAAV,EAEG,+BAFH;AAIA,YAAM,IAAIL,yBAAJ,CAAsB,qCAAtB,CAAN;AACD;;AAED,QAAIF,KAAK,KAAKC,SAAd,EAAyB;AACvB,YAAM,IAAIC,yBAAJ,CAAsB,uEAAtB,CAAN;AACD;AACF,GA1B6F,CA4B9F;;;AACA,SAAO;AACLM,IAAAA,GAAG,EAAE,OAAOT,yBAAyB,GAAG,CAAnC,CADA;AAELU,IAAAA,MAAM,EAAE,CACNT,KADM;AAFH,GAAP;AAMD,C","sourcesContent":["// @flow\n\nimport {\n  serializeError,\n} from 'serialize-error';\nimport isPlainObject from 'is-plain-object';\nimport type {\n  JsonSqlTokenType,\n  SqlFragmentType,\n} from '../types';\nimport {\n  InvalidInputError,\n} from '../errors';\nimport Logger from '../Logger';\n\nconst log = Logger.child({\n  namespace: 'createJsonSqlFragment',\n});\n\nexport default (token: JsonSqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  let value;\n\n  if (token.value === undefined) {\n    throw new InvalidInputError('JSON payload must not be undefined.');\n  } else if (token.value === null) {\n    value = token.value;\n\n  // @todo Deep check Array.\n  // eslint-disable-next-line no-negated-condition\n  } else if (!isPlainObject(token.value) && !Array.isArray(token.value)) {\n    throw new InvalidInputError('JSON payload must be a primitive value or a plain object.');\n  } else {\n    try {\n      value = JSON.stringify(token.value);\n    } catch (error) {\n      log.error({\n        error: serializeError(error),\n      }, 'payload cannot be stringified');\n\n      throw new InvalidInputError('JSON payload cannot be stringified.');\n    }\n\n    if (value === undefined) {\n      throw new InvalidInputError('JSON payload cannot be stringified. The resulting value is undefined.');\n    }\n  }\n\n  // Do not add `::json` as it will fail if an attempt is made to insert to jsonb-type column.\n  return {\n    sql: '$' + (greatestParameterPosition + 1),\n    values: [\n      value,\n    ],\n  };\n};\n"],"file":"createJsonSqlFragment.js"}